version: '3.8'

services:
  app:
    build: backend/
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
  frontend: # Ваш фронтенд сервис
    build:
      context: ./frontend # Dockerfile и контекст сборки в папке frontend
      dockerfile: Dockerfile # Явно указываем имя файла
    ports:
      - "80:80" # Фронтенд будет доступен на порту 80 вашего VPS
                # Если вы хотите другой порт, например 3000, то "3000:80"
    depends_on: # Запускать после того, как сервис 'app' (бэкенд) будет готов
      - app
    restart: unless-stopped

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - app

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5433:5432"
#  nginx_proxy: # The Nginx that serves the built frontend and proxies to backend
 #   image: nginx:stable-alpine
  #  ports:
 #     - "80:80" # This is what users will hit from the browser
  #  volumes:
      # Mount the built frontend assets from the 'frontend' service's build stage
      # This requires that your frontend Dockerfile (in ./frontend) outputs its
      # built assets to a known location, e.g., /app/build or /app/dist
      # and that this nginx_proxy service can access them.
      # A simpler way if frontend build is fast is to combine them:
      # - ./frontend/build:/usr/share/nginx/html:ro # If assets are already built on host
      # OR use a multi-stage Dockerfile for the frontend and copy from there.

      # For now, let's assume you'll build the frontend and copy assets to a known host path
      # or you're managing frontend assets differently.
      # If your frontend Dockerfile (in ./frontend) is like the one we discussed earlier
      # (node build stage, nginx serve stage), then THAT service itself is the Nginx.

      # Let's simplify and assume the 'frontend' service IS the Nginx serving the frontend
      # and also acting as the reverse proxy.

      #- ./nginx_config/default.conf:/etc/nginx/conf.d/default.conf:ro # Your custom Nginx config
      # Mount your frontend's static built files here:
      # Example: if your frontend build output is in './frontend/dist' on the host
     # - ./frontend/dist:/usr/share/nginx/html:ro # ADJUST THIS PATH
  #  depends_on:
    #  - app # Ensure backend is up before Nginx tries to proxy to it
   # restart: unless-stopped
volumes:
  postgres_data:
