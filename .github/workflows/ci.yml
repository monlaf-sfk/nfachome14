name: CI Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend_checks: # Renamed for clarity
    runs-on: ubuntu-latest
    # Define static environment variables for the test database.
    # These will be used to create the .env file for docker-compose.
    env:
      POSTGRES_USER_TEST: ci_user        # Static test user
      POSTGRES_PASSWORD_TEST: ci_password  # Static test password
      POSTGRES_DB_TEST: ci_test_db       # Static test database name
      # This DATABASE_URL should point to the 'db' service name as defined
      # in your backend/docker-compose.yml (e.g., service named 'db').
      DATABASE_URL_TEST: "postgresql+asyncpg://ci_user:ci_password@db:5432/ci_test_db"
      # Add any other non-sensitive env vars your app might need for testing.
      # E.g., SECRET_KEY_TEST: "a_non_production_test_secret"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        # This step is useful if you run any Python scripts directly on the runner,
        # but less critical if all Python execution is within Docker.
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create .env file for backend Docker Compose
        run: |
          echo "Creating .env file in ./backend/"
          echo "POSTGRES_USER=${POSTGRES_USER_TEST}" > ./backend/.env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD_TEST}" >> ./backend/.env
          echo "POSTGRES_DB=${POSTGRES_DB_TEST}" >> ./backend/.env
          echo "DATABASE_URL=${DATABASE_URL_TEST}" >> ./backend/.env
          echo "Generated ./backend/.env file content:"
          cat ./backend/.env

      - name: Run backend tests with Docker Compose
        working-directory: ./backend # Set working directory for docker-compose commands
        run: |
          echo "Starting database service (db) from docker-compose.yml..."
          docker-compose up -d db
          
          echo "Waiting for database service to be ready..."
          sleep 15 # Adjust sleep time if your DB takes longer to initialize or implement a proper health check wait
          
          echo "Building 'app' service (if needed) and running backend tests (pytest)..."
          docker-compose run --rm app pytest
          

  frontend_checks: # Renamed for clarity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Or your preferred Node.js version

      - name: Install frontend dependencies
        working-directory: ./frontend # Set working directory for npm commands
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build