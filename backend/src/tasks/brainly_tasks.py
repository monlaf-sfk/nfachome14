from .celery_app import celery_app
from src.tasks import service, schemas
from src.database import AsyncSessionLocal, SyncSessionLocal
import logging
from sqlalchemy.exc import IntegrityError
from src.assistant.llm import AssistantLLM
from asgiref.sync import async_to_sync

logger = logging.getLogger(__name__)

# --- START OF FIX ---

# Define a realistic User-Agent header to mimic a web browser.
# This is crucial for avoiding 403 Forbidden errors from sites that block scrapers.
REQUEST_HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
}

# --- END OF FIX ---


BRAINLY_URL = "https://brainly.com"
AUTOMATED_TASK_USER_ID = 1

@celery_app.task(bind=True, max_retries=3, default_retry_delay=60)
def fetch_gemini_and_add_task(self):
    try:
        llm = AssistantLLM()
        prompt = "Generate a creative, useful, and realistic to-do task for a student. Respond in JSON with 'title' and 'description' fields."
        import asyncio
        response = asyncio.run(llm.ask_async(prompt))
        import json
        import re
        try:
            cleaned = response.strip()
            if cleaned.startswith("```"):
                cleaned = re.sub(r"^```[a-zA-Z]*\n?", "", cleaned)
                cleaned = re.sub(r"\n?```$", "", cleaned)
            task_data = json.loads(cleaned)
            title = task_data.get("title", "Gemini Task")
            description = task_data.get("description", "Generated by Gemini LLM")
        except Exception:
            title = response.strip()
            description = "Generated by Gemini LLM"
        db = SyncSessionLocal()
        try:
            from src.tasks.service import create_user_task_sync
            new_task = create_user_task_sync(db, title, description, user_id=AUTOMATED_TASK_USER_ID)
            db.commit()
        finally:
            db.close()
        logger.info(f"Task '{title}' created successfully for user_id {AUTOMATED_TASK_USER_ID}.")
    except IntegrityError as e:
        logger.error(f"Database integrity error: The user with ID {AUTOMATED_TASK_USER_ID} may not exist. Details: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"Task failed with an unexpected exception: {e}", exc_info=True)
        raise